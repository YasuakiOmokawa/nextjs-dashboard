generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model customers {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @db.VarChar(255)
  email     String     @db.VarChar(255)
  image_url String     @db.VarChar(255)
  invoices  invoices[]
}

model invoices {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Int
  status      String    @db.VarChar(255)
  date        DateTime  @db.Date @default(now())
  customer_id String    @db.Uuid
  customer    customers @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @db.Timestamp(6) @default(now())
  updated_at  DateTime  @db.Timestamp(6) @default(now())
  tags        tags[]
}

model revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
  created_at  DateTime  @db.Timestamp(6) @default(now())
  updated_at  DateTime  @db.Timestamp(6) @default(now())
}

model users {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String @db.VarChar(255)
  email    String @unique
  password String
}

model tags {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String     @db.VarChar(255)
  invoices invoices[]
}

model tags2 {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String     @db.VarChar(255)
  created_at  DateTime  @db.Timestamp(6) @default(now())
  updated_at  DateTime  @db.Timestamp(6) @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}